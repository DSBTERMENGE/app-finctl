import FormComum from "../framework_dsb/frontend/General_Classes/ConstrutorDeForms.js";

/*
************************************************************
       FORMUL√ÅRIO DE GRUPOS FINANCEIROS - FINCTL
************************************************************
 * üìã FORM_GRUPOS.JS - FinCtl
 * 
 * RESPONSABILIDADES:
 * - Formul√°rio para cadastro de grupos de classifica√ß√£o de despesas
 * - Estrutura simples: apenas grupo + descri√ß√£o
 * - 1¬∫ n√≠vel de classifica√ß√£o hier√°rquica
 * - Usando a arquitetura de formul√°rios do framework DSB
 * 
 * ARQUITETURA:
 * ‚îú‚îÄ‚îÄ 1. CONSTRU√á√ÉO DO FORMUL√ÅRIO
 * ‚îú‚îÄ‚îÄ 2. SISTEMA DE EVENTOS  
 * ‚îú‚îÄ‚îÄ 3. HANDLERS ESPEC√çFICOS
 * ‚îú‚îÄ‚îÄ 4. FUN√á√ïES AUXILIARES
 * ‚îú‚îÄ‚îÄ 5. VALIDA√á√ïES
 * ‚îî‚îÄ‚îÄ 6. SIMULA√á√ïES DE DADOS
 */

// ============= 1. CONSTRU√á√ÉO DO FORMUL√ÅRIO =============

/**
 * üèóÔ∏è FUN√á√ÉO PRINCIPAL: Constr√≥i o formul√°rio de grupos
 * @returns {FormComum} Inst√¢ncia do formul√°rio configurado
 */
export function construirFormularioGrupos() {
    const formGrupos = new FormComum(
        'Cadastro de Grupos',
        '1¬∫ n√≠vel de classifica√ß√£o',
        ['input', 'textarea'],
        ['Grupo', 'Descri√ß√£o'],
        ['grupo', 'descricao'],
        ['texto', 'texto'],
        [
            {linha: 0, coluna: 0}, // Grupo
            {linha: 1, coluna: 0}  // Descri√ß√£o
        ],
        ['H', 'V'], // Orienta√ß√£o
        [25, 28], // Larguras em rem
        {x: 3, y: 5}, // Posi√ß√£o no canvas
        {
            grupoBotoes: ['S', 'S', 'S'], // Encerrar + Navega√ß√£o + CRUD
            selects: {
                labels: ['Grupos'],
                campos: ['grupo_nav'],
                larguras: ['300px'],
                arranjo: 'linha'
            }
        }
    );

    // Configura eventos espec√≠ficos do formul√°rio de grupos
    configurarEventosGrupos();

    // Popula select de navega√ß√£o com grupos dispon√≠veis
    setTimeout(() => {
        popularSelectNavegacaoGrupos(formGrupos);
    }, 100);

    return formGrupos;
}

// ============= 2. SISTEMA DE EVENTOS =============

/**
 * üéØ CONFIGURA√á√ÉO PRINCIPAL: Eventos customizados espec√≠ficos para grupos
 * Segue o padr√£o do framework mas com l√≥gica espec√≠fica do FinCtl
 */
function configurarEventosGrupos() {
    console.log('üîß DEBUG: configurarEventosGrupos() chamada!'); // DEBUG
    const divRodape = document.getElementById('divRodape');
    console.log('üîß DEBUG: divRodape encontrado:', divRodape); // DEBUG
    if (divRodape) {
        divRodape.addEventListener('formulario-acao', function(event) {
            console.log('üîß DEBUG: Evento formulario-acao capturado!', event.detail); // DEBUG
            const { acao, instancia, dados } = event.detail;
            
            console.log(`üìã form_grupos.js: Evento formulario-acao.${acao} capturado`);
            
            // Roteamento das a√ß√µes espec√≠ficas para grupos
            switch(acao) {
                case 'encerrar':
                    encerrarFormularioGrupos(instancia, dados);
                    break;
                case 'primeiro':
                    navegarGrupos('primeiro', instancia);
                    break;
                case 'anterior':
                    navegarGrupos('anterior', instancia);
                    break;
                case 'proximo':
                    navegarGrupos('proximo', instancia);
                    break;
                case 'ultimo':
                    navegarGrupos('ultimo', instancia);
                    break;
                case 'novo':
                    novoGrupo(instancia);
                    break;
                case 'editar':
                    editarGrupo(instancia, dados);
                    break;
                case 'excluir':
                    excluirGrupo(instancia, dados);
                    break;
                case 'salvar':
                    salvarGrupo(instancia, dados);
                    break;
                default:
                    console.warn(`A√ß√£o '${acao}' n√£o reconhecida em form_grupos.js`);
            }
        });
        
        console.log('‚úÖ form_grupos.js: Listener configurado no divRodape');
    } else {
        console.error('‚ùå form_grupos.js: divRodape n√£o encontrado');
    }
}

// ============= 3. HANDLERS ESPEC√çFICOS =============

// ============= 3. HANDLERS ESPEC√çFICOS =============

/**
 * üö™ HANDLER: Encerrar formul√°rio de grupos
 */
async function encerrarFormularioGrupos(instancia, dados) {
    console.log('üèÅ Encerrando formul√°rio de grupos');
    
    // Verificar se h√° altera√ß√µes n√£o salvas
    if (temAlteracoesPendentes(instancia)) {
        if (confirm('H√° altera√ß√µes n√£o salvas. Deseja realmente sair?')) {
            // Adiciona a classe hidden para ocultar o formul√°rio
            if (instancia.divContainer) {
                instancia.divContainer.classList.add('hidden');
            }
        }
    } else {
        // Adiciona a classe hidden para ocultar o formul√°rio
        if (instancia.divContainer) {
            instancia.divContainer.classList.add('hidden');
        }
    }
}

/**
 * ‚è≠Ô∏è HANDLER: Navega√ß√£o entre registros de grupos
 */
async function navegarGrupos(direcao, instancia) {
    console.log(`üîÑ Navegando para ${direcao} grupo`);
    
    try {
        const grupo = await buscarGrupoPor(direcao);
        if (grupo) {
            preencherFormularioGrupo(instancia, grupo);
        } else {
            console.log(`Nenhum grupo encontrado na dire√ß√£o: ${direcao}`);
        }
    } catch (error) {
        console.error('Erro na navega√ß√£o:', error);
        alert('Erro ao navegar entre grupos: ' + error.message);
    }
}

/**
 * üÜï HANDLER: Criar novo grupo
 */
async function novoGrupo(instancia) {
    console.log('üÜï Criando novo grupo de classifica√ß√£o');
    
    // Limpa formul√°rio - pronto para nova entrada
    instancia.limparCampos();
    
    // Foca no campo grupo para facilitar entrada
    setTimeout(() => {
        const campoGrupo = instancia.form.querySelector('#grupo');
        if (campoGrupo) {
            campoGrupo.focus();
        }
    }, 100);
}

/**
 * ‚úèÔ∏è HANDLER: Habilitar edi√ß√£o do grupo
 */
async function editarGrupo(instancia, dados) {
    console.log('‚úèÔ∏è Modo edi√ß√£o ativado para grupo');
    // A classe j√° habilita os campos automaticamente
    // Aqui podemos adicionar valida√ß√µes espec√≠ficas se necess√°rio
}

/**
 * üóëÔ∏è HANDLER: Excluir grupo
 */
async function excluirGrupo(instancia, dados) {
    console.log('üóëÔ∏è Excluindo grupo:', dados);
    
    // Verifica√ß√£o b√°sica
    if (!dados.grupo || dados.grupo.trim() === '') {
        alert('Selecione um grupo para excluir');
        return;
    }
    
    try {
        // Verifica se o grupo tem subgrupos ou transa√ß√µes vinculadas
        const temVinculacoes = await verificarVinculacoesGrupo(dados.grupo);
        if (temVinculacoes) {
            alert('Este grupo possui subgrupos ou transa√ß√µes vinculadas e n√£o pode ser exclu√≠do');
            return;
        }
        
        if (confirm(`Deseja realmente excluir o grupo "${dados.grupo}"?`)) {
            const resultado = await excluirGrupoBanco(dados.grupo);
            
            if (resultado.sucesso) {
                alert('Grupo exclu√≠do com sucesso!');
                instancia.limparCampos();
                // Navegar para pr√≥ximo registro ou limpar
                await navegarGrupos('proximo', instancia);
            } else {
                alert('Erro ao excluir grupo: ' + resultado.erro);
            }
        }
    } catch (error) {
        console.error('Erro na exclus√£o:', error);
        alert('Erro na exclus√£o: ' + error.message);
    }
}

/**
 * üíæ HANDLER: Salvar grupo
 */
async function salvarGrupo(instancia, dados) {
    console.log('üíæ Salvando grupo:', dados);
    
    // Valida√ß√µes espec√≠ficas para grupos
    if (!validarDadosGrupo(dados)) {
        return;
    }
    
    try {
        // Verifica se √© cria√ß√£o ou atualiza√ß√£o (baseado na exist√™ncia do nome)
        const isEdicao = dados.grupo && await grupoExiste(dados.grupo);
        
        const resultado = isEdicao 
            ? await atualizarGrupo(dados) 
            : await criarGrupo(dados);
        
        if (resultado.sucesso) {
            alert(`Grupo ${isEdicao ? 'atualizado' : 'criado'} com sucesso!`);
            
            // Se era novo registro, mant√©m os dados no formul√°rio
            if (!isEdicao) {
                console.log('‚úÖ Novo grupo criado:', dados.grupo);
            }
        } else {
            alert('Erro ao salvar grupo: ' + resultado.erro);
        }
    } catch (error) {
        console.error('Erro no salvamento:', error);
        alert('Erro no salvamento: ' + error.message);
    }
}

// ============= 4. FUN√á√ïES AUXILIARES =============

/**
 * ÔøΩ POPULA√á√ÉO: Select de navega√ß√£o com grupos dispon√≠veis
 */
async function popularSelectNavegacaoGrupos(instanciaForm) {
    try {
        console.log('üîÑ Populando select de navega√ß√£o de grupos...');
        
        // Obt√©m todos os grupos dispon√≠veis
        const grupos = await obterTodosGrupos();
        
        if (instanciaForm.objSelect && grupos.length > 0) {
            // Formata os dados para a select
            const opcoes = grupos.map(grupo => ({
                value: grupo.id,
                text: grupo.nome
            }));
            
            // Adiciona op√ß√£o padr√£o
            opcoes.unshift({ value: '', text: '-- Selecione um grupo --' });
            
            // Popula a select
            instanciaForm.objSelect.popularSelect('grupo_nav', opcoes);
            
            console.log(`‚úÖ Select populada com ${grupos.length} grupos`);
        } else {
            console.warn('‚ö†Ô∏è Nenhum grupo encontrado ou objSelect n√£o dispon√≠vel');
        }
        
    } catch (error) {
        console.error('‚ùå Erro ao popular select de navega√ß√£o:', error);
    }
}

/**
 * ÔøΩüîç BUSCA: Grupo por dire√ß√£o de navega√ß√£o
 */
async function buscarGrupoPor(direcao) {
    console.log(`üîç Buscando grupo: ${direcao}`);
    
    // Simula busca no banco - IMPLEMENTAR com API real
    const grupos = await obterTodosGrupos();
    
    switch(direcao) {
        case 'primeiro':
            return grupos.length > 0 ? grupos[0] : null;
        case 'ultimo':
            return grupos.length > 0 ? grupos[grupos.length - 1] : null;
        case 'anterior':
        case 'proximo':
            // Implementar l√≥gica de navega√ß√£o baseada no registro atual
            return grupos.length > 0 ? grupos[0] : null;
        default:
            return null;
    }
}

/**
 * üìù PREENCHIMENTO: Formul√°rio com dados do grupo
 */
function preencherFormularioGrupo(instancia, grupo) {
    const form = instancia.form;
    
    // Preenche campos simplificados
    if (form.querySelector('#grupo')) form.querySelector('#grupo').value = grupo.grupo || '';
    if (form.querySelector('#descricao')) form.querySelector('#descricao').value = grupo.descricao || '';
    
    console.log('‚úÖ Formul√°rio preenchido com dados do grupo:', grupo.grupo);
}

/**
 * üîç VERIFICA√á√ÉO: Altera√ß√µes pendentes
 */
function temAlteracoesPendentes(instancia) {
    // Implementar l√≥gica para detectar altera√ß√µes n√£o salvas
    // Por enquanto retorna false
    return false;
}

// ============= 5. VALIDA√á√ïES =============

/**
 * ‚úÖ VALIDA√á√ÉO: Dados do grupo
 */
function validarDadosGrupo(dados) {
    // Valida√ß√µes obrigat√≥rias para classifica√ß√£o de despesas
    if (!dados.grupo || dados.grupo.trim() === '') {
        alert('Nome do grupo √© obrigat√≥rio');
        return false;
    }
    
    if (!dados.descricao || dados.descricao.trim() === '') {
        alert('Descri√ß√£o do grupo √© obrigat√≥ria');
        return false;
    }
    
    // Verifica se o nome do grupo √© muito curto
    if (dados.grupo.trim().length < 2) {
        alert('Nome do grupo deve ter pelo menos 2 caracteres');
        return false;
    }
    
    return true;
}

/**
 * üìß VALIDA√á√ÉO: Formato de email (auxiliar)
 */
function validarEmail(email) {
    const regex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return regex.test(email);
}

// ============= 6. SIMULA√á√ïES DE DADOS =============

/**
 * üìä DADOS DE TESTE: Obter todos os grupos
 */
async function obterTodosGrupos() {
    console.log('üìä Buscando todos os grupos de classifica√ß√£o');
    // Simula dados do banco - grupos de classifica√ß√£o de despesas
    return Promise.resolve([
        {
            grupo: 'Alimenta√ß√£o',
            descricao: 'Despesas com alimenta√ß√£o em geral: supermercados, restaurantes, delivery'
        },
        {
            grupo: 'Transporte',
            descricao: 'Gastos com locomo√ß√£o: combust√≠vel, transporte p√∫blico, aplicativos'
        },
        {
            grupo: 'Moradia',
            descricao: 'Custos relacionados √† habita√ß√£o: aluguel, financiamento, manuten√ß√£o'
        },
        {
            grupo: 'Sa√∫de',
            descricao: 'Despesas m√©dicas e de bem-estar: consultas, exames, medicamentos'
        }
    ]);
}

// ============= OPERA√á√ïES DO BANCO =============

/**
 * üîç Buscar grupo por nome
 */
async function buscarGrupoPorNome(nomeGrupo) {
    console.log('üîç Buscando grupo por nome:', nomeGrupo);
    const grupos = await obterTodosGrupos();
    return grupos.find(g => g.grupo === nomeGrupo) || null;
}

/**
 * ‚úÖ Verificar se grupo existe
 */
async function grupoExiste(nomeGrupo) {
    const grupo = await buscarGrupoPorNome(nomeGrupo);
    return grupo !== null;
}

/**
 * üîó Verificar vincula√ß√µes do grupo
 */
async function verificarVinculacoesGrupo(nomeGrupo) {
    console.log('üîó Verificando subgrupos e transa√ß√µes vinculadas ao grupo:', nomeGrupo);
    // Simula verifica√ß√£o - implementar consulta real
    return Promise.resolve(false);
}

/**
 * üíæ Criar grupo no banco
 */
async function criarGrupo(dados) {
    console.log('üíæ Criando grupo de classifica√ß√£o:', dados);
    // Simula cria√ß√£o - implementar API real
    return Promise.resolve({
        sucesso: true,
        grupo: dados.grupo,
        mensagem: 'Grupo de classifica√ß√£o criado com sucesso'
    });
}

/**
 * üìù Atualizar grupo no banco
 */
async function atualizarGrupo(dados) {
    console.log('üìù Atualizando grupo de classifica√ß√£o:', dados);
    // Simula atualiza√ß√£o - implementar API real
    return Promise.resolve({
        sucesso: true,
        mensagem: 'Grupo de classifica√ß√£o atualizado com sucesso'
    });
}

/**
 * üóëÔ∏è Excluir grupo do banco
 */
async function excluirGrupoBanco(nomeGrupo) {
    console.log('üóëÔ∏è Excluindo grupo do banco:', nomeGrupo);
    return Promise.resolve({
        sucesso: true,
        mensagem: 'Grupo de classifica√ß√£o exclu√≠do com sucesso'
    });
}
